# A string slice can take a third index that specifies the "step size;" that is, the number
# of spaces between successive characters. A step size of 2 means every other character; 3 means every
# third, etc.
# ```python
# >>> fruit = 'banana'
# >>> fruit[0:5:2]
# 'bnn'
# ```
string = input("Enter a string")
print(string[0:len(string):2])




2) Write a function called rotate_word() that takes a string and an integer as parameters, and that
# returns a new string that contains the letters from the original string "rotated" by the given amount.
# For example, "cheer" rotated by 7 is "jolly" and "melon" rotated by -10 is "cubed".
# You might want to use the built-in functions ord, which converts a character to a numeric code,
# and chr, which converts numeric codes to characters.


def rotate_word(string, inc):
    str1 = ''
    for i in range(0, len(string)):
        asc = ord(string[i]) + inc
        if asc > 122:
            length = asc - 122
            length = 97 + length - 1
            asc = length
        if asc < 97:
            length = 97 - asc
            length = 122 - length + 1
            asc = length
        str1 = str1 + chr(asc)
    return str1


string = input("Enter a string")
inc = int(input("Enter increment value"))
result = rotate_word(string, inc)
print(result)


3)

#  In 1939 Ernest Vincent Wright published a 50,000 word novel called Gadsby that
# does not contain the letter "e." Since "e" is the most common letter in English, that’s not easy to
# do.
# In fact, it is difficult to construct a solitary thought without using that most common symbol. It is
# slow going at first, but with caution and hours of training you can gradually gain facility.
# All right, I’ll stop now.
# Write a function called has_no_e that returns True if the given word doesn’t have the letter "e" in
# it.

def has_no_e(string):
    for i in string:
        if i == 'e':
            return False
    else:
        return True


string = input("Enter a string")
result = has_no_e(string)
if result:
    print("The String has no 'e' ")
else:
    print("The String has 'e' ")



4)

# Modify the above program to print only the words that have no “e” and compute the percentage of the words in the list have no “e.”
def has_no_e(str_lst):
    noe_lst = []
    for j in range(0, len(str_lst)):
        if 'e' not in str_lst[j]:
            noe_lst.append(str_lst[j])
    return len(noe_lst)


rang = int(input("Enter a range"))
lst = []
for i in range(0, rang):
    string = input("Enter a string")
    lst.append(string)
result = has_no_e(lst)
percent_e_list = (result / len(lst)) * 100
print("the percentage of the words in the list have no 'e' : ", percent_e_list)




5)



#  Write a function named avoids that takes a word and a string of forbidden letters,
# and that returns True if the word doesn’t use any of the forbidden letters.

def avoids(string, forbidden_string):
    for i in forbidden_string:
        if i in string:
            print("the word use one of the forbidden letters")
            break
    else:
        print("the word doesn’t use any of the forbidden letters")


string = input("Enter a string")
forbidden_string = input("Enter a forbidden_string ")
avoids(string, forbidden_string)



6)
# Modify your program to prompt the user to enter a string of forbidden letters and then print the
# number of words that don’t contain any of them. Can you find a combination of 5 forbidden letters
# that excludes the smallest number of words?


string = [input("Enter a string") for i in range(0, 5)]
forbidden_string = input("Enter a forbidden_string ")
lst = []
for i in string:
    for j in forbidden_string:
        if j in i:
            lst.append(i)
            print(i,"the word use one of the forbidden letters")
            break
    else:
        print(i,"the word doesn’t use any of the forbidden letters")

lst2 = [k for k in lst if forbidden_string in k]
dict1 = {l: len(l) for l in lst2}
maxi = 0
char = ''
for i, j in dict1.items():
    if j >= maxi:
        maxi = j
        char = i
print(char)


7)

#  Write a function named using_only() that takes a word and a string of letters, and
# that returns True if the word contains only letters in the list. Can you make a sentence using only
# the letters acefhlo? Other than "Hoe alfalfa?"
string = input("Enter a string to check")
shld_contain = input("Enter a string")
lst = [i for i in string if i in shld_contain]
str2 = ''
for i in lst:
    str2 = str2 + i
print(str2)
if str2 == string:
    print("only letters")
else:
    print("No")


8)

# Write a function called is_abecedarian that returns True if the letters in a word
# appear in alphabetical order (double letters are ok). How many abecedarian words are there?
# (i.e) "Abhor" or "Aux" or "Aadil" should return "True"  Banana should return "False"


def is_abecedarian(string):
    count = 0
    flag = False
    for i in range(0, len(string)):
        for j in range(i + 1, len(string)):
            if string[i] <= string[j]:
                # print(string[i],string[j],i,j)
                count = count + 1
            else:
                flag = True
                break
        if flag:
            break
    return flag


string = [i for i in input("Enter a string").split(',')]
for i in string:
    flag = is_abecedarian(i)
    if flag:
        print(i, " is Not a Sorted String")
    else:
        print(i, "is a Sorted String")



9)

#  Write a function called is_sorted that takes a list as a parameter and returns True
# if the list is sorted in ascending order and False otherwise. You can assume (as a precondition) that
# the elements of the list can be compared with the relational operators <, >, etc.
# For example, is_sorted([1,2,2]) should return True and is_sorted(['b','a']) should return
# False.


def is_sorted(lst):
    count = 0
    flag = False
    for j in range(0, len(lst)):
        for k in range(j + 1, len(lst)):
            if lst[j] <= lst[k]:
                count = count + 1
            else:
                flag = True
                break
        if flag:
            break
    return flag


range1 = int(input("Enter a range"))
lst = []
for i in range(0, range1):
    num = input("enter elements of list")
    lst.append(num)
flag = is_sorted(lst)
if flag:
    print("Not a Sorted List")
else:
    print("Sorted List")

10)


 # Two words are anagrams if you can rearrange the letters from one to spell the other.
# Write a function called is_anagram that takes two strings and returns True if they are anagrams.


def is_anagram(str1, str2):
    lst = []
    lst1 = []
    for i in str1:
        lst.append(i)
    for i in str2:
        lst1.append(i)
    lst.sort()
    lst1.sort()

    if lst == lst1:
        return True
    else:
        return False


str1 = input("Enter a string : ")
str2 = input("Enter a string : ")
result = is_anagram(str1, str2)
if result:
    print("anagram")
else:
    print("Not a anagram")